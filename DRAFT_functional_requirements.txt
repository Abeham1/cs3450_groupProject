number = functional requirement 
# = explanation

1. This project shall utilize a two tier Client/Server architecture.
	# Adding a middle tier would most likely include adding a proxy server. 
	  Placing a proxy server in the DMZ between the restaurant users (including admin level users) and
	  the actual hosting OS would better protect the back end service hosts.
	# 2 tier is a easier implementation for technical reasons.
2. The project will have a logical design of hub and spokes. 
	# The clients will pass information to the server, then the server will pass that information on to
	  the affected clients. A typical order will pass through the server many times during a transaction
3. All communications between the clients and server will be encrypted per TLS 1.2
	# This is the cypher suite currently considered best practice for data security
4. Aside from the guest/customer view, all user views will be password protected.
	# project will utilize views to separate the information the server sends based on the requesting
	  client's role (customer / server / cook / manager)
5. The server will validate all user requests.
	# ex. the client sends a request for a $2.99 burger but the menu price has changed to 3.99
	# ex. client requests 10 French fries and inventory says we only have 8 French fries
	# the server is the final authority on price / availability.
6. All views shall use a session cookie (life to not exceed 24 hours)
	# cookies let users stay logged in when the page refreshes
	# provides a technical limitation on how long a user can stay logged in to the system
7. Database will contain at least 3 tables and no more than 10
	# provides limit on project growth (can't keep track of everything)
	# does not allow for one giant table with excessive fields
	# will help in separating sensitive data from public data.
	# will allow most entries to have valid entries in all fields resulting in simpler programming with
	  fewer !valid tests and easier JSON parsing.
